"""Initial migration

Revision ID: 19ea266ff7b4
Revises:
Create Date: 2025-07-15 12:51:03.864974

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '19ea266ff7b4'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('api_tokens', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('api_tokens_id_seq'::regclass)"))
    op.alter_column('api_tokens', 'user_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.alter_column('api_tokens', 'last_used_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('api_tokens', 'expires_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('api_tokens', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index(op.f('ix_api_tokens_id'), 'api_tokens', ['id'], unique=False)
    op.alter_column('api_usage', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('api_usage', 'user_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.alter_column('api_usage', 'token_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.alter_column('api_usage', 'providers_requested',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('api_usage', 'providers_fresh',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('api_usage', 'providers_cached',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('api_usage', 'providers_rate_limited',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('api_usage', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_api_usage_created_at'), table_name='api_usage')
    op.drop_index(op.f('idx_api_usage_user_id_created_at'), table_name='api_usage')
    op.create_index(op.f('ix_api_usage_id'), 'api_usage', ['id'], unique=False)
    op.alter_column('callback_queue', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('callback_queue_id_seq'::regclass)"))
    op.alter_column('callback_queue', 'user_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.alter_column('callback_queue', 'providers',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=False)
    op.alter_column('callback_queue', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('callback_queue', 'next_retry_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_index(op.f('idx_callback_queue_next_retry_at'), table_name='callback_queue')
    op.drop_index(op.f('idx_callback_queue_status'), table_name='callback_queue')
    op.create_index(op.f('ix_callback_queue_id'), 'callback_queue', ['id'], unique=False)
    op.alter_column('companies', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('companies_id_seq'::regclass)"))
    op.alter_column('companies', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('companies', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('companies_nip_key'), 'companies', type_='unique')
    op.drop_index(op.f('idx_companies_nip'), table_name='companies')
    op.create_index(op.f('ix_companies_id'), 'companies', ['id'], unique=False)
    op.create_index(op.f('ix_companies_nip'), 'companies', ['nip'], unique=True)
    op.alter_column('company_bank_accounts', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('company_bank_accounts_id_seq'::regclass)"))
    op.alter_column('company_bank_accounts', 'company_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.alter_column('company_bank_accounts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('company_bank_accounts', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('company_bank_accounts_company_id_account_number_key'), 'company_bank_accounts', type_='unique')
    op.drop_index(op.f('idx_company_bank_accounts_account_number'), table_name='company_bank_accounts')
    op.drop_index(op.f('idx_company_bank_accounts_company_id'), table_name='company_bank_accounts')
    op.create_index(op.f('ix_company_bank_accounts_id'), 'company_bank_accounts', ['id'], unique=False)
    op.alter_column('data_changes', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('data_changes', 'company_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.alter_column('data_changes', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_data_changes_company_id'), table_name='data_changes')
    op.drop_index(op.f('idx_data_changes_provider'), table_name='data_changes')
    op.create_index(op.f('ix_data_changes_id'), 'data_changes', ['id'], unique=False)
    op.alter_column('iban_enrichment', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('iban_enrichment', 'account_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.alter_column('iban_enrichment', 'fetched_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('iban_enrichment', 'expires_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text("(CURRENT_TIMESTAMP + '7 days'::interval)"))
    op.drop_constraint(op.f('iban_enrichment_account_id_key'), 'iban_enrichment', type_='unique')
    op.drop_index(op.f('idx_iban_enrichment_account_id'), table_name='iban_enrichment')
    op.drop_index(op.f('idx_iban_enrichment_expires_at'), table_name='iban_enrichment')
    op.drop_index(op.f('idx_iban_enrichment_jsonb'), table_name='iban_enrichment', postgresql_using='gin')
    op.create_index(op.f('ix_iban_enrichment_id'), 'iban_enrichment', ['id'], unique=False)
    op.alter_column('mf_data', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('mf_data', 'company_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.alter_column('mf_data', 'fetched_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('mf_data', 'expires_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text("(CURRENT_TIMESTAMP + '1 day'::interval)"))
    op.drop_index(op.f('idx_mf_data_company_id'), table_name='mf_data')
    op.drop_index(op.f('idx_mf_data_expires_at'), table_name='mf_data')
    op.drop_index(op.f('idx_mf_data_jsonb'), table_name='mf_data', postgresql_using='gin')
    op.drop_constraint(op.f('mf_data_company_id_key'), 'mf_data', type_='unique')
    op.create_index(op.f('ix_mf_data_id'), 'mf_data', ['id'], unique=False)
    op.alter_column('regon_data', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('regon_data', 'company_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.alter_column('regon_data', 'fetched_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('regon_data', 'expires_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text("(CURRENT_TIMESTAMP + '1 day'::interval)"))
    op.drop_index(op.f('idx_regon_data_company_id'), table_name='regon_data')
    op.drop_index(op.f('idx_regon_data_expires_at'), table_name='regon_data')
    op.drop_index(op.f('idx_regon_data_jsonb'), table_name='regon_data', postgresql_using='gin')
    op.drop_constraint(op.f('regon_data_company_id_entity_type_report_type_key'), 'regon_data', type_='unique')
    op.create_index(op.f('ix_regon_data_id'), 'regon_data', ['id'], unique=False)
    op.alter_column('user_company_subscriptions', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('user_company_subscriptions', 'user_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.alter_column('user_company_subscriptions', 'company_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.alter_column('user_company_subscriptions', 'providers',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=False)
    op.alter_column('user_company_subscriptions', 'last_validated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('user_company_subscriptions', 'next_validation_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('user_company_subscriptions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_company_subscriptions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_user_company_subscriptions_company_id'), table_name='user_company_subscriptions')
    op.drop_index(op.f('idx_user_company_subscriptions_next_validation'), table_name='user_company_subscriptions', postgresql_where='(is_active = true)')
    op.drop_index(op.f('idx_user_company_subscriptions_user_id'), table_name='user_company_subscriptions')
    op.drop_constraint(op.f('user_company_subscriptions_user_id_company_id_key'), 'user_company_subscriptions', type_='unique')
    op.create_index(op.f('ix_user_company_subscriptions_id'), 'user_company_subscriptions', ['id'], unique=False)
    op.alter_column('users', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('users_id_seq'::regclass)"))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.alter_column('vies_data', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('vies_data', 'company_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.alter_column('vies_data', 'fetched_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('vies_data', 'expires_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text("(CURRENT_TIMESTAMP + '1 day'::interval)"))
    op.drop_index(op.f('idx_vies_data_company_id'), table_name='vies_data')
    op.drop_index(op.f('idx_vies_data_expires_at'), table_name='vies_data')
    op.drop_index(op.f('idx_vies_data_jsonb'), table_name='vies_data', postgresql_using='gin')
    op.drop_constraint(op.f('vies_data_company_id_key'), 'vies_data', type_='unique')
    op.create_index(op.f('ix_vies_data_id'), 'vies_data', ['id'], unique=False)
    op.alter_column('webhook_deliveries', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('webhook_deliveries', 'callback_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.alter_column('webhook_deliveries', 'delivered_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index(op.f('ix_webhook_deliveries_id'), 'webhook_deliveries', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_webhook_deliveries_id'), table_name='webhook_deliveries')
    op.alter_column('webhook_deliveries', 'delivered_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('webhook_deliveries', 'callback_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('webhook_deliveries', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_index(op.f('ix_vies_data_id'), table_name='vies_data')
    op.create_unique_constraint(op.f('vies_data_company_id_key'), 'vies_data', ['company_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_vies_data_jsonb'), 'vies_data', ['data'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_vies_data_expires_at'), 'vies_data', ['expires_at'], unique=False)
    op.create_index(op.f('idx_vies_data_company_id'), 'vies_data', ['company_id'], unique=False)
    op.alter_column('vies_data', 'expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text("(CURRENT_TIMESTAMP + '1 day'::interval)"))
    op.alter_column('vies_data', 'fetched_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('vies_data', 'company_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('vies_data', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('users_id_seq'::regclass)"))
    op.drop_index(op.f('ix_user_company_subscriptions_id'), table_name='user_company_subscriptions')
    op.create_unique_constraint(op.f('user_company_subscriptions_user_id_company_id_key'), 'user_company_subscriptions', ['user_id', 'company_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_user_company_subscriptions_user_id'), 'user_company_subscriptions', ['user_id'], unique=False)
    op.create_index(op.f('idx_user_company_subscriptions_next_validation'), 'user_company_subscriptions', ['next_validation_at'], unique=False, postgresql_where='(is_active = true)')
    op.create_index(op.f('idx_user_company_subscriptions_company_id'), 'user_company_subscriptions', ['company_id'], unique=False)
    op.alter_column('user_company_subscriptions', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_company_subscriptions', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_company_subscriptions', 'next_validation_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('user_company_subscriptions', 'last_validated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('user_company_subscriptions', 'providers',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=False)
    op.alter_column('user_company_subscriptions', 'company_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('user_company_subscriptions', 'user_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('user_company_subscriptions', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_index(op.f('ix_regon_data_id'), table_name='regon_data')
    op.create_unique_constraint(op.f('regon_data_company_id_entity_type_report_type_key'), 'regon_data', ['company_id', 'entity_type', 'report_type'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_regon_data_jsonb'), 'regon_data', ['data'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_regon_data_expires_at'), 'regon_data', ['expires_at'], unique=False)
    op.create_index(op.f('idx_regon_data_company_id'), 'regon_data', ['company_id'], unique=False)
    op.alter_column('regon_data', 'expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text("(CURRENT_TIMESTAMP + '1 day'::interval)"))
    op.alter_column('regon_data', 'fetched_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('regon_data', 'company_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('regon_data', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_index(op.f('ix_mf_data_id'), table_name='mf_data')
    op.create_unique_constraint(op.f('mf_data_company_id_key'), 'mf_data', ['company_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_mf_data_jsonb'), 'mf_data', ['data'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_mf_data_expires_at'), 'mf_data', ['expires_at'], unique=False)
    op.create_index(op.f('idx_mf_data_company_id'), 'mf_data', ['company_id'], unique=False)
    op.alter_column('mf_data', 'expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text("(CURRENT_TIMESTAMP + '1 day'::interval)"))
    op.alter_column('mf_data', 'fetched_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('mf_data', 'company_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('mf_data', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_index(op.f('ix_iban_enrichment_id'), table_name='iban_enrichment')
    op.create_index(op.f('idx_iban_enrichment_jsonb'), 'iban_enrichment', ['enrichment_data'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_iban_enrichment_expires_at'), 'iban_enrichment', ['expires_at'], unique=False)
    op.create_index(op.f('idx_iban_enrichment_account_id'), 'iban_enrichment', ['account_id'], unique=False)
    op.create_unique_constraint(op.f('iban_enrichment_account_id_key'), 'iban_enrichment', ['account_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('iban_enrichment', 'expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text("(CURRENT_TIMESTAMP + '7 days'::interval)"))
    op.alter_column('iban_enrichment', 'fetched_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('iban_enrichment', 'account_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('iban_enrichment', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_index(op.f('ix_data_changes_id'), table_name='data_changes')
    op.create_index(op.f('idx_data_changes_provider'), 'data_changes', ['provider'], unique=False)
    op.create_index(op.f('idx_data_changes_company_id'), 'data_changes', ['company_id'], unique=False)
    op.alter_column('data_changes', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('data_changes', 'company_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('data_changes', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_index(op.f('ix_company_bank_accounts_id'), table_name='company_bank_accounts')
    op.create_index(op.f('idx_company_bank_accounts_company_id'), 'company_bank_accounts', ['company_id'], unique=False)
    op.create_index(op.f('idx_company_bank_accounts_account_number'), 'company_bank_accounts', ['account_number'], unique=False)
    op.create_unique_constraint(op.f('company_bank_accounts_company_id_account_number_key'), 'company_bank_accounts', ['company_id', 'account_number'], postgresql_nulls_not_distinct=False)
    op.alter_column('company_bank_accounts', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('company_bank_accounts', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('company_bank_accounts', 'company_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('company_bank_accounts', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('company_bank_accounts_id_seq'::regclass)"))
    op.drop_index(op.f('ix_companies_nip'), table_name='companies')
    op.drop_index(op.f('ix_companies_id'), table_name='companies')
    op.create_index(op.f('idx_companies_nip'), 'companies', ['nip'], unique=False)
    op.create_unique_constraint(op.f('companies_nip_key'), 'companies', ['nip'], postgresql_nulls_not_distinct=False)
    op.alter_column('companies', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('companies', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('companies', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('companies_id_seq'::regclass)"))
    op.drop_index(op.f('ix_callback_queue_id'), table_name='callback_queue')
    op.create_index(op.f('idx_callback_queue_status'), 'callback_queue', ['status'], unique=False)
    op.create_index(op.f('idx_callback_queue_next_retry_at'), 'callback_queue', ['next_retry_at'], unique=False)
    op.alter_column('callback_queue', 'next_retry_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('callback_queue', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('callback_queue', 'providers',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=False)
    op.alter_column('callback_queue', 'user_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('callback_queue', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('callback_queue_id_seq'::regclass)"))
    op.drop_index(op.f('ix_api_usage_id'), table_name='api_usage')
    op.create_index(op.f('idx_api_usage_user_id_created_at'), 'api_usage', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('idx_api_usage_created_at'), 'api_usage', ['created_at'], unique=False)
    op.alter_column('api_usage', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('api_usage', 'providers_rate_limited',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('api_usage', 'providers_cached',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('api_usage', 'providers_fresh',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('api_usage', 'providers_requested',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('api_usage', 'token_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('api_usage', 'user_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('api_usage', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_index(op.f('ix_api_tokens_id'), table_name='api_tokens')
    op.alter_column('api_tokens', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('api_tokens', 'expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('api_tokens', 'last_used_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('api_tokens', 'user_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('api_tokens', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('api_tokens_id_seq'::regclass)"))
    # ### end Alembic commands ###
