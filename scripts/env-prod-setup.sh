#!/bin/bash

# CompanyHub Production Setup Script

set -e

echo "üöÄ Setting up CompanyHub production environment..."

# Check if Docker is installed
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker is not installed. Please install Docker first."
    exit 1
fi

# Load environment variables for production
if [ -f .env ]; then
    echo "üìù Loading environment variables from .env file..."
    export $(grep -v '^#' .env | grep -v '^$' | xargs)
    echo "‚úÖ Environment variables loaded."
else
    echo "‚ö†Ô∏è  Warning: .env file not found. Using default values."
    echo "üìù Creating .env file from template..."
    cp .env.example .env
    echo "‚úÖ .env file created. Please edit it with your production values."
    echo "üõë Setup stopped. Please configure .env file before running again."
    exit 1
fi

# Build and start services
echo "üîß Building and starting services..."
docker compose -f docker-compose.prod.yml down --volumes
docker compose -f docker-compose.prod.yml build
docker compose -f docker-compose.prod.yml up -d

echo "‚è≥ Waiting for services to be ready..."
sleep 10

# Check if services are running
echo "üîç Checking service health..."

# Check PostgreSQL
if docker compose -f docker-compose.prod.yml exec db pg_isready -U ${POSTGRES_USER:-companyhub} -d ${POSTGRES_DB:-companyhub}; then
    echo "‚úÖ PostgreSQL is ready"
else
    echo "‚ùå PostgreSQL is not ready"
    exit 1
fi

# Check Redis
if docker compose -f docker-compose.prod.yml exec redis redis-cli ping | grep -q PONG; then
    echo "‚úÖ Redis is ready"
else
    echo "‚ùå Redis is not ready"
    exit 1
fi

# Check FastAPI app
if curl -f http://localhost:${DOCKER_APP_PORT:-8000}/health &> /dev/null; then
    echo "‚úÖ FastAPI app is ready"
else
    echo "‚ùå FastAPI app is not ready"
    exit 1
fi

echo ""
echo "üéâ Production environment is ready!"
echo ""
echo "üìç Services:"
echo "  ‚Ä¢ API:              http://localhost:${DOCKER_APP_PORT:-8000}"
echo "  ‚Ä¢ API Docs:         http://localhost:${DOCKER_APP_PORT:-8000}/docs"
echo "  ‚Ä¢ Database Admin:   http://localhost:${PGADMIN_PORT:-5050}"
echo ""
echo "üîß Useful commands:"
echo "  ‚Ä¢ View logs:        docker compose -f docker-compose.prod.yml logs -f"
echo "  ‚Ä¢ Stop services:    docker compose -f docker-compose.prod.yml down"
echo "  ‚Ä¢ Rebuild:          docker compose -f docker-compose.prod.yml build"
echo "  ‚Ä¢ Run tests:        docker compose -f docker-compose.prod.yml exec app pytest"
echo ""
echo "üìù Next steps:"
echo "  ‚Ä¢ Verify .env file has production values"
echo "  ‚Ä¢ Run database migrations: ./scripts/db-migrate.sh"
echo "  ‚Ä¢ Monitor logs: docker compose -f docker-compose.prod.yml logs -f"
echo ""
